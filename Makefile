# Makefile for dotfiles-spaces
#
    #  Using ~/.dotmake:
    #  ----------------
    #    Both Devx Spaces and github Codespaces will symlink our ~/.dotmake launcher into
    #    the HOME tree.  (The launcher invokes our Makefile after first capturing the cwd to ORGDIR,
    #    and then changing to the ~/dotfiles-spaces dir.)
    #
    #
	#  About app-specific init hooks:
	#  (using target 'app-setup')
	#  -----------------------------
	#
	#    The "app" is "whatever primary repos(s) comprise the development trees for
	#    which this environment was constructed."
	#
	#    To dynamically resolve that set:
	#       - Search for any git WC off the root (e.g. /*/.git exists)
	#       - Find the list of makefiles that we recognize as environment setup hooks
	#       - Run those hooks
	#
	#    We recognize all of the following (order matters):
	#       /me/.dotfiles.mk
	#       /me/dotfiles.mk
	#       /me/spaces-dotfiles.mk
	#       /.dotfiles.mk
	#       /dotfiles.mk
	#       /spaces-dotfiles.mk
	#
	#    For all such files:
	#     - we 'cd' to the dir containing the makefile first
	#     - we invoke the default target
	#     - the ordering within a dir is always [.dotfiles.mk, dotfiles.mk,spaces-dotfiles.mk]
	#     - any error in any hook aborts the entire hook sequence remaining
	#

SHELL=/bin/bash
.ONESHELL:
.SUFFIXES:
MAKEFLAGS += --no-builtin-rules --no-print-directory
.SHELLFLAGS= -uec
absdir := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
Makefile = $(absdir)Makefile
.DEFAULT_GOAL := Config
Makefile: ;




# Create+include .env.mk and .metatargets.mk:
include $(absdir).env.mk          # Autogenerated on every run
include $(absdir).metatargets.mk  # Autogenerated on every run

VscodeUserDir = $(HOME)/.local/share/code-server/User
VscodeSettingsOrg = bbgithub:$(User)
GhPubOrg = https://github.com/Stabledog

Flag := $(HOME)/.flag-dotfiles

# Individual feature targets have their own makefiles:
include $(shell ls inc/*.mk)


# Top-level config:
#  (Other config targets should cite this as a dependency to get nice output ordering)
Config: .cfg.top
.PHONY: Config
.cfg.top: $(Finit)
	@set -ue

	cat <<-EOF
	#  $(absdir)Makefile:
	Makefile=$(Makefile)
	Code=$(Code)
	absdir=$(absdir)
	User=$(User)
	DOTFILES_SYS=$(DOTFILES_SYS)
	GITHUB_USER=$(GITHUB_USER)
	ISBB=$(ISBB)
	Flag=$(Flag)
	Flags="$(shell ls $(Flag))"
	VscodeSettingsOrg=$(VscodeSettingsOrg)
	VscodeUserDir=$(VscodeUserDir)
	GhPubOrg=$(GhPubOrg)
	AppSetupHooks="$(AppSetupHooks)"
	Megadeps="$(Megadeps)"
	ORGDIR="$(ORGDIR)"

	EOF


$(absdir).env.mk: $(absdir)bin/env-detect $(absdir)Makefile
	@set -ue # Environment detection comes before any conditional stuff
	$< > $@

$(absdir).metatargets.mk: $(absdir)Makefile $(absdir).env.mk
	@set -ue # metatargets like 'mega' need some conditional logic
	source $(absdir).env.mk
	{
		echo "DOTFILES_SYS=$${DOTFILES_SYS}"
		case "$${DOTFILES_SYS}" in
		 	codespaces) echo 'Megadeps=mega-codespaces' ;;
		 	devxspaces) echo 'Megadeps=mega-devxspaces' ;;
		 	wsl) echo 'Megadeps=mega-wsl' ;;
			*) exit 19  # Bad DOTFILES_SYS value
		 esac
	} > $@

# Targets which touch a flag in $(Flag) should depend on $(Finit)
Finit=$(Flag)/.init
$(Flag)/.init:
	mkdir -p $(Flag)
	echo "$(Flag) 1" >> $(HOME)/.tox-index
	echo "$(HOME)/dotfiles" >> $(HOME)/.tox-index
	touch $@

shell:
mega-devxspaces: \
	makestuff \
	vbase \
	spaceup \
	vscodevim \
	vsweb-settings \
	app-setup \
	vimsane
	@set -ue
	echo "Ok: $@"

mega-codespaces: \
	makestuff \
	vbase
	echo "Ok: $@"

mega-wsl: \
	vimsane
	echo "Ok: $@"




# - - - - - app-setup - - - - -
app-setup: $(Flag)/app-setup
AppSetupHooks = $(shell \
				for xroot in $$(ls -d /*/.git 2>/dev/null | sed 's|/.git||'); do \
					for makefile in $$(ls $${xroot}{/me,}/{.dotfiles,dotfiles,spaces-dotfiles}.mk 2>/dev/null); do \
						echo $$makefile; \
					done; \
				done; \
			)
$(Flag)/app-setup:
	@set -ue
	set -x
	[[ -n "$(AppSetupHooks)" ]] && {
		for hook in $(AppSetupHooks); do
			(
				set -ue
				echo "app-setup hook start: $$hook:" >&2
				cd $$(dirname $$hook)
				make -f $$(basename $$hook) || {
					echo "ERROR 19: failed running \"make $$hook\" in $$PWD"
					exit 1
				}
			)
		done
	}
	touch $@

mega: $(Megadeps)

shell:
	@set -ue   # Helper shell for maintaining the dotfiles repo
	cd $(absdir)
	Ps1Tail=dotshell bash

clean:
	@set -ue
	rm $(absdir).env.mk $(absdir).metatargets.mk || :
	[[ -d $(Flag) ]] && rm $(Flag)/* &>/dev/null || :




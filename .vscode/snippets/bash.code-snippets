{
    // Helper: use vscode-make-snippet.sh to format code for
    //   the snippet json rules.
    //
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "Alias with completion forwarding": {
        "description": "Adds shell completion for an alias (depends on complete-alias)",
        "prefix": ["alias", "complete", "forward"],
        "scope": "shellscript",
        "body": [
            "alias ${1:my-alias}='$0http_proxy= https_proxy= git' # Alias with underlying autocompletion support",
            "complete -F _complete_alias ${1}  # Add completion forwarding"
        ]
    },
	"newScript": {
        "description": "Common basic elements of a new script: die(), main(), etc.",
		"prefix": ["bashScript"],
		"body": [
			"#!/bin/bash",
            "# ${TM_FILENAME}",
            "",
            "scriptName=\"\\${scriptName:-\"$(command readlink -f -- \"\\$0\")\"}\"",
            "# (if needed) scriptDir=\"$(command dirname -- \"\\${scriptName}\")\"",
            "[[ -n \"\\$DEBUGSH\" ]] && set -x",
            "",
            "die() {",
            "    builtin echo \"ERROR(\\$(basename \"\\${scriptName}\")): \\$*\" >&2",
			"    builtin exit 1",
			"}",
            "",
            "main() {",
            "    set -ue",
            "    set -x",
            "    echo This script needs some content.",
            "}",
            "",
            "if [[ -z \"\\${sourceMe}\" ]]; then",
            "    main \"\\$@\"",
            "    builtin exit",
            "fi",
            "command true",
            ""
		]
	},
    "sourceMeRun": {
        "description": "Include sourceMeRun.taskrc",
        "prefix": ["bpoint", "sourceMeRun"],
        "scope": "shellscript",
        "body": [
            "# Defines bpoint():",
            "_DEBUG_=\\${_DEBUG_:-0}",
            "[[ \\$_DEBUG_ -eq 1 ]] && {",
            "    echo \"_DEBUG_ enabled, sourceMeRun.taskrc is loading.\" >&2",
            "    [[ -f ~/bin/sourceMeRun.taskrc ]] && source ~/bin/sourceMeRun.taskrc",
            "} || {",
            "    bpoint() { : ;} # no-op",
            "}",
            ""
        ]
    },
    "bashDebugPS4plain": {
        "description": "Enable PS4 for uber-trace of shell statements",
        "prefix": ["bashDebugPS4plain","ps4x"], // Multiple prefixes may be defined
        "scope": "shellscript",
        "body": [
            "#shellcheck disable=2154",
            "PS4='$( _0=$?; exec 2>/dev/null; realpath -- \"${BASH_SOURCE[0]:-?}:\\${LINENO} ^\\$_0 ${FUNCNAME[0]:-?}()=>\" ) '"
        ]
    },
    "bashDebugPS4color": {
        "description": "Enable PS4 (with color) for uber-trace of shell statements",
        "prefix": ["bashDebugPS4color","ps4y"], // Multiple prefixes may be defined
        "scope": "shellscript",
        "body": [
            "#shellcheck disable=2154",
            "PS4='\\033[0;33m$( _0=$?;set +e;exec 2>/dev/null;realpath -- \"${BASH_SOURCE[0]:-?}:\\${LINENO} \\033[0;35m^\\$_0\\033[32m ${FUNCNAME[0]:-?}()=>\" )\\033[;0m '"
        ]
    },

	"die": {
		"prefix": "die",
        "scope": "shellscript",
		"body": [
            "die() {",
            "    builtin echo \"ERROR(\\$(basename \"\\${scriptName}\")): \\$*\" >&2",
			"    builtin exit 1",
			"}"
		],
		"description": "Terminate shell with error 1 and message"
	},
    "cleanup_trap": {
        "prefix": "cleanup_trap",
        "scope": "shellscript",
        "description": "Setup trap for resource cleanup",
        "body" : [
            "__cleanup_${label}() {",
            "    echo __cleanup_${label} invoked 2>/dev/null; ",
            "    # rm -rf $tmp1 || :",
            "}",
            "trap '__cleanup_${label}; trap - EXIT RETURN;' EXIT RETURN"
        ]
    },
	"parseArgs": {
		"prefix": "parseArgs",
        "scope": "shellscript",
		"body": [
			"parseArgs() {",
			"    [[ $# -eq 0 ]] && die \"Expected arguments\"",
			"    local filename  # Declare arguments to be parsed as local",
			"    while [[ -n \\$1 ]]; do",
			"        case \\$1 in",
			"            -h|--help)",
			"                #  do_help $*",
			"                exit 1",
			"                ;;",
			"            -f|--filename)",
			"                filename=\\$2",
			"                shift",
			"                ;;",
			"            *)",
			"                unknown_args=\"\\$unknown_args \\$1\"",
			"                ;;",
			"        esac",
			"        shift",
			"    done",
			"    # Validate that minimal args have been parsed:",
			"    # ??",
			"}"
		],
		"description": "Iterate args and interpret them"
	},
    "autocomplete_template": {
        "description": "Bash completion template",
        "prefix": ["autocomplete_template"], // Multiple prefixes may be defined
        // "scope": "shellscript",  // TODO: Set this to the relevant language(s) to make  snippet non-global
        "body": [
            "# myfun-autocomplete",
            "# vim: filetype=sh :",
            "",
            "_myfun() { # Shell completion for myfun. Place this file in ~/.bash_completion.d/myfun",
            "    local cur prev opts",
            "    COMPREPLY=()",
            "    cur=\"\\${COMP_WORDS[COMP_CWORD]}\"",
            "    # The main job is usually to set 'opts' to the set of meaningful commands:",
            "    opts=\"--help command1 command2\"",
            "    COMPREPLY=( \\$(compgen -W \"\\${opts}\" -- \"\\${cur}\" ) )",
            "    return 0",
            "}",
            "",
            "complete -F _myfun myfun",
        ]
    },
    "printv": {
        "description": "Add printv() function",
        "prefix": ["printv"],
        "body": [
            "printv ()",
            "{",
            "    local __vv __xpr ;",
            "    for __vv in \"\\$@\";",
            "    do",
            "        [[ \\$( eval declare -p \"\\$__vv\" ) =~ ^declare\\ -a ]] && {",
            "            __xpr=\"\\\\${\\${__vv}[@]}\";",
            "            eval 'printf \"%s\\n\" ' \"\\\"\\$__xpr\\\"\"",
            "        } || {",
            "            eval echo \"\\\\$\\${__vv}\"",
            "        };",
            "    done",
            "}",
        ]
    },
}
